version: "3.7"

services:
  redis:
    image: "redis:alpine"
  web:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: gunicorn hckthn.wsgi:application --bind 0.0.0.0:8000
    expose:
      - 8000
    env_file:
      - ./.env.prod
    depends_on:
      - db
  db:
    image: postgres:12.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env.prod.db
  frontend:
    volumes:
      - react-build:/home/frontend/build
    build: ./frontend
  nginx:
    image: nginx:stable-alpine
    entrypoint: nginx -g 'daemon off;'
    volumes:
      - react-build:/build
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.statickeysil.rule=Host(`dkeysil.dmitrydavis.xyz`)"
      - "traefik.http.routers.statickeysil.tls=true"
      - "traefik.http.routers.statickeysil.tls.certresolver=cf"
      - "traefik.http.routers.statickeysil.entryPoints=web"
      - "traefik.http.services.statickeysil.loadbalancer.server.port=80"
    depends_on:
      - web
      - frontend
  celery:
    build: ./backend
    command: celery -A backend worker -l info
    volumes:
      - ./backend/:/usr/src/backend/
    env_file:
      - ./.env.prod
    depends_on:
      - db
      - redis
  celery-beat:
    build: ./backend
    command: celery -A backend beat -l info
    volumes:
      - ./backend/:/usr/src/backend/
    env_file:
      - ./.env.prod
    depends_on:
      - db
      - redis

volumes:
  postgres_data:
  react-build:

networks:
  default:
    external:
      name: traefik
