version: "3.7"

services:
  redis:
    image: "redis:alpine"
    labels:
      - traefik.enable=false
    networks:
      - internal
  web:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: gunicorn backend.wsgi:application --bind 0.0.0.0:8001
    labels:
      - traefik.enable=false
    networks:
      - internal
    expose:
      - 8001
    env_file:
      - ./.env.prod
    depends_on:
      - db
  db:
    image: postgres:12.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    labels:
      - traefik.enable=false
    networks:
      - internal
    env_file:
      - ./.env.prod.db
  frontend:
    volumes:
      - react-build:/home/frontend/build
    labels:
      - traefik.enable=false
    networks:
      - internal
    build: ./frontend
  nginx:
    image: nginx:stable-alpine
    entrypoint: nginx -g 'daemon off;'
    expose:
      - 80
    labels:
      - traefik.http.routers.taskedd.rule=Host(`taskedd.dkeysil.xyz`)
      - traefik.http.routers.taskedd.tls=true
      - traefik.http.routers.taskedd.tls.certresolver=lets-encrypt
      - traefik.port=80
    networks:
      - internal
      - web
    volumes:
      - react-build:/build
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web
      - frontend
  celery:
    build: ./backend
    command: celery -A backend worker -l info
    volumes:
      - ./backend/:/usr/src/backend/
    labels:
      - traefik.enable=false
    networks:
      - internal
    env_file:
      - ./.env.prod
    depends_on:
      - db
      - redis
  celery-beat:
    build: ./backend
    command: celery -A backend beat -l info
    volumes:
      - ./backend/:/usr/src/backend/
    labels:
      - traefik.enable=false
    networks:
      - internal
    env_file:
      - ./.env.prod
    depends_on:
      - db
      - redis

volumes:
  postgres_data:
  react-build:
networks:
  web:
    external: true
  internal:
    external: false
